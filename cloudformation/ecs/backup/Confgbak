---
AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, behind a private load balancer.
Parameters:
  EnvironmentName:
    Type: String
    Default: uat
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: config
    Description: A name for the service

  ImageUrl:
    Type: String
    Default: 596849958460.dkr.ecr.ap-south-1.amazonaws.com/config
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 8102
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:

################ The Task definition for container to run and Resources Required ####################
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: "awsvpc"

      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      TaskRoleArn: !Ref 'ECSTaskExecutionRole'

      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
              HostPort: !Ref 'ContainerPort'
              Protocol: tcp

##### Service to deploy From ECR Repositories, run multiple copies of a type of task, and gather up their logs and metrics, as well as monitor the number of running tasks and replace any that have crashed ##############################
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListnerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !ImportValue ClusterName 
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !GetAtt FargateContainerSecurityGroup.GroupId
          Subnets:
            - !ImportValue 'PrivateSubnetOne'
            - !ImportValue 'PrivateSubnetTwo'
            - !ImportValue 'PrivateSubnetThree'

      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroupPrivate'
#### This target group This is used for keeping track of all the tasks, and what IP addresses / port numbers they have. It can automatically distribute traffic across all the targets. #####
  TargetGroupPrivate:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-${ServiceName}-ecs-TG
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /actuator
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200-499
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      VpcId: !ImportValue 'VpcId'

