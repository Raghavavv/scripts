---
AWSTemplateFormatVersion: '2010-09-09'
Description: Creating Cluster and dependencies

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: devel

  VpcId:
    Description: The VPC ID 
    Type: String
    Default: vpc-0236a53fffc25de35

  ECSTaskExecutionRole:
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc 
    Type: String
    Default: arn:aws:iam::596849958460:role/ecsTaskExecutionRole

  PrivateSubnetOne:
    Description: The First Private Subnet ID
    Type: String
    Default: subnet-098e65f35e91412c2
  PrivateSubnetTwo:
    Description: The Second Private Subnet ID
    Type: String
    Default: subnet-0548980c756958ec2
  PrivateSubnetThree:
    Description: The Third Private Subnet ID
    Type: String
    Default: subnet-0bb5218626088d807

  ServiceName:
    Description: The Name of the Service which we are going to deploy
    Type: String
    Default: config

  ImageUrl:    
    Type: String
    Default: 596849958460.dkr.ecr.ap-south-1.amazonaws.com/config:devel-84
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 8102
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 1024
    Description: How much memory in megabytes to give the container

  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

Resources:
#################################### ECS Cluster #################################################
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-Cluster
      CapacityProviders:
      - FARGATE
      DefaultCapacityProviderStrategy:
      - CapacityProvider: FARGATE
        Weight: 1

      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT

      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: environment
          Value: !Sub ${EnvironmentName}

#### A security group for the containers we will run in Fargate, Three rules allowing network traffic from a public facing load balancer, a private internal load balancer, and from other members of the security group.#####

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VpcId'
  EcsSecurityGroupIngressFromPrivateALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the private ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'LoadBalancerSG'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  # Load balancers for getting traffic to containers.
  # This sample template creates two load balancers:

###### An internal load balancer, this would be used for a service that is not directly #######
###### accessible to the public, but instead should only receive traffic from other services ######

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the internal load balancer
      VpcId: !Ref 'VpcId'

  LoadBalancerIngressFromECS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Only accept traffic from a container in the fargate container security group
      GroupId: !Ref 'LoadBalancerSG'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-${ServiceName}-ecs
      Scheme: internal
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # This load balancer is put into the private subnet, so that there is no
        # route for the public to even be able to access the private load balancer.
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree
      SecurityGroups: [!Ref 'LoadBalancerSG']

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP

########################## Iam Role For autoscaling ECS Tasks #################################

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ECS-Autoscaling-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-ECS-Autoscaling-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DeleteAlarms
                Resource: "*"


######## NOTE:  We can remove the Resources "Service, Taskdefinition, Autoscaling Policies, Target Group and Listener Rules. As we are creating these resources for every Service and We have created seperate d eployment file ###########

#### This target group This is used for keeping track of all the tasks, and what IP addresses / port numbers they have. It can automatically distribute traffic across all the targets. #####
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-${ServiceName}-ecs-TG
      TargetType: ip
      HealthCheckIntervalSeconds: 60 
      HealthCheckPath: /actuator
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200-499
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      VpcId: !Ref 'VpcId'
   
  LoadBalancerListnerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref 'LoadBalancerListener'
      Priority: !Ref 'Priority'

################################# Service Discovery ############################################
  ServiceDiscoveryNameSpace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Description: "Service Discovery Namespace for Services"
      Vpc: !Ref VpcId
      Name: !Sub ${EnvironmentName}-Services-Discovery


################ The Task definition for container to run and Resources Required ####################
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: "awsvpc"

      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
      TaskRoleArn: !Ref 'ECSTaskExecutionRole'

      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
              HostPort: !Ref 'ContainerPort'
              Protocol: tcp
              

###################### Service to deploy#######################################
  Service:
    Type: AWS::ECS::Service
    DependsOn: 
      - LoadBalancerListnerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - !GetAtt FargateContainerSecurityGroup.GroupId
          Subnets:
            - !Ref 'PrivateSubnetOne'
            - !Ref 'PrivateSubnetTwo'
            - !Ref 'PrivateSubnetThree'

      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

###################### Autoscaling Configuration For ECS Services ########################
#################### Scalable Target to define minimum and maximum capacity ###############

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      RoleARN: !Ref 'ECSTaskExecutionRole'
      ResourceId: !Join ["/", [service, !Ref "ECSCluster", !GetAtt [Service, Name]]]
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: 1
      MaxCapacity: 2

  AutoScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-${ServiceName}-CPU-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref 'ScalableTarget'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 15.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  AutoScalingPolicyMEM:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-${ServiceName}-MEM-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref 'ScalableTarget'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization

######## These are the values output by the CloudFormation template ##############
Outputs:
  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSClusterName' ]]

  LoadBalancerURL:
    Description: The url of the internal load balancer
    Value: !GetAtt 'LoadBalancer.DNSName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'LoadBalancerURL' ]]

  ALBListener:
    Description: The ARN of the private load balancer's Listener
    Value: !Ref 'LoadBalancerListener'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ALBListener' ]]

  FargateContainerSecurityGroupID:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'FargateContainerSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'FargateContainerSecurityGroupID' ]]

  ALBListnerRule:
    Value: !Ref 'LoadBalancerListnerRule'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'ALBListnerRule']]
  
  ECSAutoScalingRoleArn:
    Value: !Ref 'AutoScalingRole'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'ECSAutoScalingRoleArn']]
  ECSServiceArn:
    Value: !Ref 'Service'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'ECSServiceArn']]
  VpcId:
    Value: !Ref 'VpcId'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'VpcId']]

  Subnet1:
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'PrivateSubnetOne']]
  Subnet2:
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'PrivateSubnetTwo']]
  Subnet3:
    Value: !Ref 'PrivateSubnetThree'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'PrivateSubnetThree']]
  TaskExecutionRole:
    Value: !Ref 'ECSTaskExecutionRole'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'TaskExecutionRole']]
  AutoscalingPolicyID:
    Value: !Ref 'AutoScalingPolicyCPU'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'AutoscalingPolicyID']]
  AutoscalingPolicyMemID:
    Value: !Ref 'AutoScalingPolicyMEM'
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'AutoscalingPolicyMemID']]
